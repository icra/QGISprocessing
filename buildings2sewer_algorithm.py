# -*- coding: utf-8 -*-

"""
/***************************************************************************
 buildings2sewert
                                 A QGIS plugin
 Connect buildings to the sewer system
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-06-15
        copyright            : (C) 2021 by Josep Pueyo-Ros, ICRA
        email                : jpueyo@icra.cat
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Josep Pueyo-Ros, ICRA'
__date__ = '2021-06-15'
__copyright__ = '(C) 2021 by Josep Pueyo-Ros, ICRA'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import *
from qgis.core import *
import qgis.utils
import processing

class buildings2sewertAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                'INPUT',
                self.tr('Buildings layer'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        self.addParameter(
            QgsProcessingParameterVectorLayer(
                'MANHOLES',
                self.tr('Manholes layer'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                'node_id',
                self.tr('Field with manholes id'),
                parentLayerParameterName='MANHOLES',
                allowMultiple=False
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                'DEM',
                self.tr('Elevations raster')
            )
        )

        self.addParameter(
            QgsProcessingParameterDistance(
                'MAX_DIST',
                self.tr('Maximum distance')
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                'Z_TOL',
                self.tr('Altitude tolerance'),
                type = QgsProcessingParameterNumber.Integer
            )
        )

        self.addParameter(
            QgsProcessingParameterBoolean(
            'LINES_BOOL',
            self.tr('Create connection lines')
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                'LINES',
                self.tr('Connection lines layer'),
                type = QgsProcessing.TypeVectorLine
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer'),
                type = QgsProcessing.TypeVectorPoint
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.

        #load layers and parameters
        parcels_o = self.parameterAsVectorLayer(parameters,'INPUT', context)
        nodes_o = self.parameterAsVectorLayer(parameters, 'MANHOLES', context)
        mde = self.parameterAsRasterLayer(parameters, 'DEM', context)

        #load parameters
        max_dist = self.parameterAsDouble(parameters, 'MAX_DIST', context)
        max_z_tol = self.parameterAsInt(parameters, 'Z_TOL', context)
        node_id = self.parameterAsString(parameters, 'NODE_ID', context)

        connection_lines = self.parameterAsBool(parameters, 'LINES_BOOL', context)

        #convert parcels to centroids
        parcels = processing.run("native:centroids", {'INPUT':parcels_o,'ALL_PARTS':False,'OUTPUT':'memory:'})['OUTPUT']

        #copy nodes_o
        features = nodes_o.getFeatures()
        nodes = QgsVectorLayer("Point", "duplicated_layer", "memory")
        nodes_data = nodes.dataProvider()
        attr = nodes_o.dataProvider().fields().toList()
        nodes_data.addAttributes(attr)
        nodes.updateFields()
        nodes_data.addFeatures(features)

        #class to calculate distance between points
        d = QgsDistanceArea()

        if parcels.fields().indexFromName('z') == -1:
            parcels = self.z_sampling(parcels, mde, feedback)
        if nodes.fields().indexFromName('z') == -1:
            nodes = self.z_sampling(nodes, mde, feedback)

        # QgsMessageLog.logMessage("Hello world", 'buildings2sewer', level=Qgis.Info)
        feedback.setProgressText("Calculation of altitudes finished")
        feedback.setProgressText("Calculating connections...")

        #get indexs for nodes fields
        node_idx = nodes.fields().indexFromName(node_id)
        node_z = nodes.fields().indexFromName('z')

        #check if fields exist and delete if
        if parcels.fields().indexFromName("manhole_id") != -1:
            idx = parcels.fields().indexFromName("manhole_id")
            parcels.dataProvider().deleteAttributes([idx])
            parcels.updateFields()
        if parcels.fields().indexFromName('dist') != -1:
            idx = parcels.fields().indexFromName('dist')
            parcels.dataProvider().deleteAttributes([idx])
            parcels.updateFields()
        if parcels.fields().indexFromName('z_diff') != -1:
            idx = parcels.fields().indexFromName('z_diff')
            parcels.dataProvider().deleteAttributes([idx])
            parcels.updateFields()

        #create fields to save data
        parcels.dataProvider().addAttributes([
            QgsField("manhole_id", QVariant.String),
            QgsField("dist", QVariant.Int),
            QgsField("z_diff", QVariant.Double)
            ])
        parcels.updateFields()

        #get index of created fields
        parcel_node = parcels.fields().indexFromName("manhole_id")
        parcel_dist = parcels.fields().indexFromName("dist")
        parcel_z_diff = parcels.fields().indexFromName("z_diff")
        parcel_z = parcels.fields().indexFromName('z')

        request = QgsFeatureRequest().setSubsetOfAttributes([parcel_node, parcel_dist, parcel_z_diff, parcel_z])

        total = 100.0 / parcels.featureCount() if parcels.featureCount() else 0
        features = parcels.getFeatures(request)

        # destination layer
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                context, parcels.fields(), parcels.wkbType(), parcels_o.sourceCrs())

        # connection lines layer
        if connection_lines:
            line_fields = QgsFields()
            line_fields.append(QgsField("dist", QVariant.Int))
            line_fields.append(QgsField("z_diff", QVariant.Double))

            (lines, lines_id) = self.parameterAsSink(parameters, 'LINES',
                    context, line_fields, 2, parcels_o.sourceCrs())


        #iterate points
        for current, parcel in enumerate(features):
            z_tol = 0

            #create pointXY
            p_geom = parcel.geometry().asPoint()

            #set min_dist as infinite
            min_dist = float('inf')

            #loop until min dist or z-tol reach threshold
            while (min_dist >= max_dist) and (z_tol <= max_z_tol):
                #filter lower nodes
                exp = QgsExpression('z <= {} + {}'.format(parcel['z'], z_tol))
                request = QgsFeatureRequest(exp).setSubsetOfAttributes([node_idx, node_z])

                #search closest node
                for node in nodes.getFeatures(request):
                    n_geom = node.geometry().asPoint()
                    dist = d.measureLine(p_geom, n_geom)
                    if dist < min_dist:
                        min_dist = dist
                        closest = node[node_idx]
                        z_diff = node[node_z] - parcel[parcel_z]
                        closest_geom = node.geometry().asPoint()
                z_tol += 1
            parcel[parcel_node] = closest
            parcel[parcel_dist] = min_dist
            parcel[parcel_z_diff] = z_diff
            # feedback.setProgressText(str(parcel.attributes()))
            sink.addFeature(parcel, QgsFeatureSink.FastInsert)

            #add connection line
            if connection_lines:
                line = QgsFeature(line_fields)
                line.setAttributes([min_dist, z_diff])
                line.setGeometry(QgsGeometry.fromPolylineXY([p_geom, closest_geom]))
                lines.addFeature(line, QgsFeatureSink.FastInsert)

            # Update the progress bar
            feedback.setProgress(int(current * total))



        # for current, feature in enumerate(features):
        #     # Stop the algorithm if cancel button has been clicked
        #     if feedback.isCanceled():
        #         break
        #
        #     # Add a feature in the sink
        #     sink.addFeature(feature, QgsFeatureSink.FastInsert)
        #
            # Update the progress bar
            # feedback.setProgress(int(current * total))

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        return {self.OUTPUT: dest_id, 'LINES': lines_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'buildings2sewer'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Sewer system'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return buildings2sewertAlgorithm()

    #define function to calculate z values from mde
    def z_sampling(self, points, mde, feedback):


        #create z field if it don't exist
        if points.fields().indexFromName('z') == -1:
            z = QgsField('z', QVariant.Double)
            points.dataProvider().addAttributes([z])
            points.updateFields()

        #search the index of z field
        idx = points.fields().indexFromName('z')

        #set the progressbar
        total = 100.0 / points.featureCount() if points.featureCount() else 0
        features = points.getFeatures()

        mem_layer = QgsVectorLayer("Point", "duplicated_layer", "memory")

        mem_layer_data = mem_layer.dataProvider()
        attr = points.dataProvider().fields().toList()
        mem_layer_data.addAttributes(attr)
        mem_layer.updateFields()
        mem_layer_data.addFeatures(features)

        features = mem_layer.getFeatures()

        #open editing mode in points and write z values in z field
        with edit(mem_layer):
            for current, point in enumerate(features):
                if feedback.isCanceled():
                    break

                x = point.geometry().asPoint()
                val, res = mde.dataProvider().sample(x, 1)
                point[idx] = val
                mem_layer.updateFeature(point)

                #update progressbar
                feedback.setProgress(int(current * total))
        return mem_layer
